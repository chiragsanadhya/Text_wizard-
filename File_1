{"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN3WvFtaLRmlWtbDXY+j8/J"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install transformers","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZzOC-JlqdxJb","executionInfo":{"status":"ok","timestamp":1714908083467,"user_tz":-330,"elapsed":8129,"user":{"displayName":"Chirag Sanadhya","userId":"06671951063446170947"}},"outputId":"a1eed914-c821-44aa-cecf-4dfda998ee31"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":"Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.40.1)\n\nRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.14.0)\n\nRequirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.20.3)\n\nRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.25.2)\n\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.0)\n\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n\nRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2023.12.25)\n\nRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.31.0)\n\nRequirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n\nRequirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.3)\n\nRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.2)\n\nRequirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers) (2023.6.0)\n\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers) (4.11.0)\n\nRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.7)\n\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.2.2)\n"}]},{"cell_type":"code","source":"!pip install python-docx","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T2r7ThTooG_n","executionInfo":{"status":"ok","timestamp":1714910907062,"user_tz":-330,"elapsed":12500,"user":{"displayName":"Chirag Sanadhya","userId":"06671951063446170947"}},"outputId":"c2fe9331-a84d-41cf-c115-e65dc7535fbe"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":"Collecting python-docx\n\n  Downloading python_docx-1.1.2-py3-none-any.whl (244 kB)\n\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m244.3/244.3 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\n\u001b[?25hRequirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.9.4)\n\nRequirement already satisfied: typing-extensions>=4.9.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.11.0)\n\nInstalling collected packages: python-docx\n\nSuccessfully installed python-docx-1.1.2\n"}]},{"cell_type":"code","source":"!pip install python-pptx","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_hJwKbIkcBfu","executionInfo":{"status":"ok","timestamp":1714924058465,"user_tz":-330,"elapsed":15326,"user":{"displayName":"Chirag Sanadhya","userId":"06671951063446170947"}},"outputId":"9c2d1295-4277-4296-ec81-5ef010232100"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":"Collecting python-pptx\n\n  Downloading python_pptx-0.6.23-py3-none-any.whl (471 kB)\n\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m471.6/471.6 kB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\n\u001b[?25hRequirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from python-pptx) (4.9.4)\n\nRequirement already satisfied: Pillow>=3.3.2 in /usr/local/lib/python3.10/dist-packages (from python-pptx) (9.4.0)\n\nCollecting XlsxWriter>=0.5.7 (from python-pptx)\n\n  Downloading XlsxWriter-3.2.0-py3-none-any.whl (159 kB)\n\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m159.9/159.9 kB\u001b[0m \u001b[31m15.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\n\u001b[?25hInstalling collected packages: XlsxWriter, python-pptx\n\nSuccessfully installed XlsxWriter-3.2.0 python-pptx-0.6.23\n"}]},{"cell_type":"code","source":"!pip install PyPDF2","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YaneGO1rcFEL","executionInfo":{"status":"ok","timestamp":1714924144723,"user_tz":-330,"elapsed":17252,"user":{"displayName":"Chirag Sanadhya","userId":"06671951063446170947"}},"outputId":"7eecf022-a450-43fd-887c-755b069324f8"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":"Collecting PyPDF2\n\n  Downloading pypdf2-3.0.1-py3-none-any.whl (232 kB)\n\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m232.6/232.6 kB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\n\u001b[?25hInstalling collected packages: PyPDF2\n\nSuccessfully installed PyPDF2-3.0.1\n"}]},{"cell_type":"code","source":"from transformers import BartForConditionalGeneration, BartTokenizer\n\n\nmodel_name = \"facebook/bart-large-cnn\"\ntokenizer = BartTokenizer.from_pretrained(model_name)\nmodel = BartForConditionalGeneration.from_pretrained(model_name)","metadata":{"id":"gqeDPrn1fAuq","executionInfo":{"status":"ok","timestamp":1714910924131,"user_tz":-330,"elapsed":12045,"user":{"displayName":"Chirag Sanadhya","userId":"06671951063446170947"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"from docx import Document\nfrom pptx import Presentation\nimport PyPDF2","metadata":{"id":"seE21PQP8PJv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#FROM THE NORMAL TXT FILE\n\ndef generate_summary_from_file(file_path, tokenizer, model, max_length=150, num_beams=4):\n\n    with open(file_path, 'r') as file:\n        file_content_txt = file.read()\n\n\n    inputs = tokenizer(file_content_txt, return_tensors=\"pt\", max_length=1024, truncation=True)\n    summary_ids = model.generate(inputs[\"input_ids\"], num_beams=num_beams, max_length=max_length, early_stopping=True)\n    summary_TXT = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n\n    return summary_TXT\n\n\n\n#FROM THE DOCUMENT(DOCX) FILE\n\ndef generate_summary_from_docx(file_path, tokenizer, model, max_length=150, num_beams=4):\n\n    doc = Document(file_path)\n\n\n    doc_text = \"\"\n    for paragraph in doc.paragraphs:\n        doc_text += paragraph.text + \"\\n\"\n\n\n    inputs = tokenizer(doc_text, return_tensors=\"pt\", max_length=1024, truncation=True)\n    summary_ids = model.generate(inputs[\"input_ids\"], num_beams=num_beams, max_length=max_length, early_stopping=True)\n    summary_DOCX = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n\n    return summary_DOCX\n\n\n#FROM THE PPT\n\ndef generate_summary_from_pptx(ppt_file, tokenizer, model, max_length=150, num_beams=4):\n\n    presentation = Presentation(ppt_file)\n\n\n    slide_texts = \"\"\n    for slide in presentation.slides:\n        for shape in slide.shapes:\n            if hasattr(shape, 'text'):\n                slide_texts += shape.text + '\\n'\n\n\n    inputs = tokenizer(slide_texts, return_tensors=\"pt\", max_length=1024, truncation=True)\n    summary_ids = model.generate(inputs[\"input_ids\"], num_beams=num_beams, max_length=max_length, early_stopping=True)\n    summary_PPT = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n\n    return summary_PPT\n\n\n\n#FROM THE PDF\n\ndef generate_summary_from_pdf(pdf_file, tokenizer, model, max_length=150, num_beams=4):\n\n    with open(pdf_file, 'rb') as file:\n\n        pdf_reader = PyPDF2.PdfFileReader(file)\n\n\n        pdf_text = \"\"\n\n\n        for page_num in range(pdf_reader.numPages):\n\n            page = pdf_reader.getPage(page_num)\n\n\n            pdf_text += page.extractText()\n\n\n    inputs = tokenizer(pdf_text, return_tensors=\"pt\", max_length=1024, truncation=True)\n    summary_ids = model.generate(inputs[\"input_ids\"], num_beams=num_beams, max_length=max_length, early_stopping=True)\n    summary_PDF = tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n\n    return summary_PDF\n","metadata":{"id":"uO9XYlGC8okS","executionInfo":{"status":"ok","timestamp":1714932592184,"user_tz":-330,"elapsed":467,"user":{"displayName":"Chirag Sanadhya","userId":"06671951063446170947"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"text_file = '/content/project_experiment.rtf'\nsummary = generate_summary_from_file(text_file, tokenizer, model)\nprint(summary_TXT)\n\n\n\n\ndocx_file = '/content/project_experiment.docx'\nsummary = generate_summary_from_docx(docx_file, tokenizer, model)\nprint(summary_DOCX)\n\n\n\npdf_file = '/content/sample.pdf'\nsummary = generate_summary_from_pdf(pdf_file, tokenizer, model)\nprint(summary_PPT)\n\n\n\n\nppt_file = '/content/Environmental-Regulations-PP.pptx'\nsummary = generate_summary_from_pptx(ppt_file, tokenizer, model)\nprint(summary_PDF)","metadata":{"id":"2KO_zWf0fbZ7"},"execution_count":null,"outputs":[]}]}